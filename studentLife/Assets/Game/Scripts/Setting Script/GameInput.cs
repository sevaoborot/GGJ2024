//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Game/Input System/GameInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @GameInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @GameInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""GameInput"",
    ""maps"": [
        {
            ""name"": ""Minigame01"",
            ""id"": ""81093547-ce8f-4be8-a698-f613b00f623e"",
            ""actions"": [
                {
                    ""name"": ""Up"",
                    ""type"": ""Button"",
                    ""id"": ""bd4429c1-0518-4122-b546-75437e47da0e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Down"",
                    ""type"": ""Button"",
                    ""id"": ""68e46d92-dedb-4b67-a5d1-ba5e1b6c43d7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""14417834-6ff6-46e7-8197-bbe81b75aafd"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Up"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f95adf02-25f0-4b41-a5a8-e2096ef4699d"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Down"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Minigame02"",
            ""id"": ""cc1f1492-bd8c-4163-9bbc-049cc38c9723"",
            ""actions"": [
                {
                    ""name"": ""Cheat"",
                    ""type"": ""Button"",
                    ""id"": ""dedc5e82-c3f9-4eb1-bea2-34f5df60647e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""3dfe6528-d05b-4b8f-9be1-0e6912c473da"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": ""Hold(duration=0.1,pressPoint=0.25)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Cheat"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Minigame01
        m_Minigame01 = asset.FindActionMap("Minigame01", throwIfNotFound: true);
        m_Minigame01_Up = m_Minigame01.FindAction("Up", throwIfNotFound: true);
        m_Minigame01_Down = m_Minigame01.FindAction("Down", throwIfNotFound: true);
        // Minigame02
        m_Minigame02 = asset.FindActionMap("Minigame02", throwIfNotFound: true);
        m_Minigame02_Cheat = m_Minigame02.FindAction("Cheat", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Minigame01
    private readonly InputActionMap m_Minigame01;
    private List<IMinigame01Actions> m_Minigame01ActionsCallbackInterfaces = new List<IMinigame01Actions>();
    private readonly InputAction m_Minigame01_Up;
    private readonly InputAction m_Minigame01_Down;
    public struct Minigame01Actions
    {
        private @GameInput m_Wrapper;
        public Minigame01Actions(@GameInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Up => m_Wrapper.m_Minigame01_Up;
        public InputAction @Down => m_Wrapper.m_Minigame01_Down;
        public InputActionMap Get() { return m_Wrapper.m_Minigame01; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(Minigame01Actions set) { return set.Get(); }
        public void AddCallbacks(IMinigame01Actions instance)
        {
            if (instance == null || m_Wrapper.m_Minigame01ActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_Minigame01ActionsCallbackInterfaces.Add(instance);
            @Up.started += instance.OnUp;
            @Up.performed += instance.OnUp;
            @Up.canceled += instance.OnUp;
            @Down.started += instance.OnDown;
            @Down.performed += instance.OnDown;
            @Down.canceled += instance.OnDown;
        }

        private void UnregisterCallbacks(IMinigame01Actions instance)
        {
            @Up.started -= instance.OnUp;
            @Up.performed -= instance.OnUp;
            @Up.canceled -= instance.OnUp;
            @Down.started -= instance.OnDown;
            @Down.performed -= instance.OnDown;
            @Down.canceled -= instance.OnDown;
        }

        public void RemoveCallbacks(IMinigame01Actions instance)
        {
            if (m_Wrapper.m_Minigame01ActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMinigame01Actions instance)
        {
            foreach (var item in m_Wrapper.m_Minigame01ActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_Minigame01ActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public Minigame01Actions @Minigame01 => new Minigame01Actions(this);

    // Minigame02
    private readonly InputActionMap m_Minigame02;
    private List<IMinigame02Actions> m_Minigame02ActionsCallbackInterfaces = new List<IMinigame02Actions>();
    private readonly InputAction m_Minigame02_Cheat;
    public struct Minigame02Actions
    {
        private @GameInput m_Wrapper;
        public Minigame02Actions(@GameInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Cheat => m_Wrapper.m_Minigame02_Cheat;
        public InputActionMap Get() { return m_Wrapper.m_Minigame02; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(Minigame02Actions set) { return set.Get(); }
        public void AddCallbacks(IMinigame02Actions instance)
        {
            if (instance == null || m_Wrapper.m_Minigame02ActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_Minigame02ActionsCallbackInterfaces.Add(instance);
            @Cheat.started += instance.OnCheat;
            @Cheat.performed += instance.OnCheat;
            @Cheat.canceled += instance.OnCheat;
        }

        private void UnregisterCallbacks(IMinigame02Actions instance)
        {
            @Cheat.started -= instance.OnCheat;
            @Cheat.performed -= instance.OnCheat;
            @Cheat.canceled -= instance.OnCheat;
        }

        public void RemoveCallbacks(IMinigame02Actions instance)
        {
            if (m_Wrapper.m_Minigame02ActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMinigame02Actions instance)
        {
            foreach (var item in m_Wrapper.m_Minigame02ActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_Minigame02ActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public Minigame02Actions @Minigame02 => new Minigame02Actions(this);
    public interface IMinigame01Actions
    {
        void OnUp(InputAction.CallbackContext context);
        void OnDown(InputAction.CallbackContext context);
    }
    public interface IMinigame02Actions
    {
        void OnCheat(InputAction.CallbackContext context);
    }
}
